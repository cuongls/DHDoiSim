//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DHDoiSim.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DHDoiSimEntities : DbContext
    {
        public DHDoiSimEntities()
            : base("name=DHDoiSimEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DMDiaBan> DMDiaBans { get; set; }
        public virtual DbSet<DMDonViKT> DMDonViKTs { get; set; }
        public virtual DbSet<DMKetQuaThucHien> DMKetQuaThucHiens { get; set; }
        public virtual DbSet<DMMucUuTien> DMMucUuTiens { get; set; }
        public virtual DbSet<DMPhong> DMPhongs { get; set; }
        public virtual DbSet<DMStatusOBKH> DMStatusOBKHs { get; set; }
        public virtual DbSet<DMStatusSimTrang> DMStatusSimTrangs { get; set; }
        public virtual DbSet<DMStatusSuDung> DMStatusSuDungs { get; set; }
        public virtual DbSet<DMTo> DMToes { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TestTable> TestTables { get; set; }
        public virtual DbSet<Sim_Trang> Sim_Trang { get; set; }
        public virtual DbSet<DMQHPX> DMQHPXes { get; set; }
        public virtual DbSet<Sim_KH> Sim_KH { get; set; }
        public virtual DbSet<ThongKe> ThongKes { get; set; }
        public virtual DbSet<ThongBao> ThongBaos { get; set; }
        public virtual DbSet<UserList> UserLists { get; set; }
        public virtual DbSet<DMLoaiGiayTo> DMLoaiGiayToes { get; set; }
        public virtual DbSet<DMLyDoTon> DMLyDoTons { get; set; }
        public virtual DbSet<DMNguongTon> DMNguongTons { get; set; }
        public virtual DbSet<Sim_Phieu> Sim_Phieu { get; set; }
        public virtual DbSet<DoiSim_DM_ImageUnit> DoiSim_DM_ImageUnit { get; set; }
        public virtual DbSet<Sim_Phieu_NhatKyUpdate> Sim_Phieu_NhatKyUpdate { get; set; }
        public virtual DbSet<ThongKeDoiSimThanhCong> ThongKeDoiSimThanhCongs { get; set; }
        public virtual DbSet<Sim_KH_NhatKyUpdate> Sim_KH_NhatKyUpdate { get; set; }
        public virtual DbSet<DMDonViThongKeNSCL> DMDonViThongKeNSCLs { get; set; }
        public virtual DbSet<DMKyThongKeNSCL> DMKyThongKeNSCLs { get; set; }
        public virtual DbSet<ThongKeNSCL> ThongKeNSCLs { get; set; }
        public virtual DbSet<ThongKeOutBound> ThongKeOutBounds { get; set; }
        public virtual DbSet<DMNhomDiaBan> DMNhomDiaBans { get; set; }
        public virtual DbSet<ThongKeChiTietDonVi> ThongKeChiTietDonVis { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_CreateTable_Sim_KH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateTable_Sim_KH");
        }
    
        public virtual int SP_CreateTable_Sim_Phieu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateTable_Sim_Phieu");
        }
    
        public virtual int SP_CreateTable_Sim_Trang()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateTable_Sim_Trang");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_Insert_Sim_KH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Sim_KH");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_QHPX()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_QHPX");
        }
    
        public virtual int SP_Convert_Sim_KH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Convert_Sim_KH");
        }
    
        public virtual int SP_Convert_Sim_Phieu_DaGiao_XLS_Da_Run()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Convert_Sim_Phieu_DaGiao_XLS_Da_Run");
        }
    
        public virtual int SP_Convert_Sim_Phieu_DaGiao_XLS_To_Sim_KH_Da_Run()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Convert_Sim_Phieu_DaGiao_XLS_To_Sim_KH_Da_Run");
        }
    
        public virtual int SP_Convert_Sim_Phieu_DaGiao_XLS_To_Sim_Phieu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Convert_Sim_Phieu_DaGiao_XLS_To_Sim_Phieu");
        }
    
        public virtual int SP_Create_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Create_User");
        }
    
        public virtual int SP_Convert_Sim_Phieu_DaGiao_XLS_To_Sim_Phieu_Da_Run()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Convert_Sim_Phieu_DaGiao_XLS_To_Sim_Phieu_Da_Run");
        }
    
        public virtual int SP_KiemTraSoLieu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_KiemTraSoLieu");
        }
    
        public virtual int SP_ThongKeNSCL(Nullable<int> thang, Nullable<int> nam, string maDonVi)
        {
            var thangParameter = thang.HasValue ?
                new ObjectParameter("Thang", thang) :
                new ObjectParameter("Thang", typeof(int));
    
            var namParameter = nam.HasValue ?
                new ObjectParameter("Nam", nam) :
                new ObjectParameter("Nam", typeof(int));
    
            var maDonViParameter = maDonVi != null ?
                new ObjectParameter("MaDonVi", maDonVi) :
                new ObjectParameter("MaDonVi", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ThongKeNSCL", thangParameter, namParameter, maDonViParameter);
        }
    
        public virtual int SP_KhoiTao_Sim_KH_NhatKyUpdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_KhoiTao_Sim_KH_NhatKyUpdate");
        }
    
        public virtual int SP_ThongKeOutBound(string maDonVi, Nullable<System.DateTime> tuNgay, Nullable<System.DateTime> denNgay)
        {
            var maDonViParameter = maDonVi != null ?
                new ObjectParameter("MaDonVi", maDonVi) :
                new ObjectParameter("MaDonVi", typeof(string));
    
            var tuNgayParameter = tuNgay.HasValue ?
                new ObjectParameter("TuNgay", tuNgay) :
                new ObjectParameter("TuNgay", typeof(System.DateTime));
    
            var denNgayParameter = denNgay.HasValue ?
                new ObjectParameter("DenNgay", denNgay) :
                new ObjectParameter("DenNgay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ThongKeOutBound", maDonViParameter, tuNgayParameter, denNgayParameter);
        }
    
        public virtual int SP_ThongKeKetQuaDoiSim(Nullable<System.DateTime> tuNgay, Nullable<System.DateTime> denNgay)
        {
            var tuNgayParameter = tuNgay.HasValue ?
                new ObjectParameter("TuNgay", tuNgay) :
                new ObjectParameter("TuNgay", typeof(System.DateTime));
    
            var denNgayParameter = denNgay.HasValue ?
                new ObjectParameter("DenNgay", denNgay) :
                new ObjectParameter("DenNgay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ThongKeKetQuaDoiSim", tuNgayParameter, denNgayParameter);
        }
    
        public virtual int SP_GenUserNameAndMaNVToSimPhieu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GenUserNameAndMaNVToSimPhieu");
        }
    
        public virtual int SP_ThongKeChiTietDonVi(Nullable<int> phong, string tungay, string denngay)
        {
            var phongParameter = phong.HasValue ?
                new ObjectParameter("Phong", phong) :
                new ObjectParameter("Phong", typeof(int));
    
            var tungayParameter = tungay != null ?
                new ObjectParameter("tungay", tungay) :
                new ObjectParameter("tungay", typeof(string));
    
            var denngayParameter = denngay != null ?
                new ObjectParameter("denngay", denngay) :
                new ObjectParameter("denngay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ThongKeChiTietDonVi", phongParameter, tungayParameter, denngayParameter);
        }
    }
}
